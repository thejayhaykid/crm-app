// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // Extended user profile
  userProfile   UserProfile?
  
  // CRM relationships
  contacts      Contact[]
  opportunities Opportunity[]
  communications Communication[]
  activities    Activity[]
  notes         Note[]
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CRM Models
model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  role        String  @default("user")
  timezone    String  @default("UTC")
  theme       String  @default("system") // system, light, dark
  preferences Json?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#3B82F6")
  
  contacts      ContactTag[]
  opportunities OpportunityTag[]
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  email     String?
  phone     String?
  company   String?
  title     String?
  address   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  opportunities   Opportunity[]
  communications  Communication[]
  activities      Activity[]
  notes           Note[]
  documents       Document[]
  tags            ContactTag[]
}

model ContactTag {
  id        String @id @default(cuid())
  contactId String
  tagId     String
  
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([contactId, tagId])
}

model Opportunity {
  id              String    @id @default(cuid())
  userId          String
  contactId       String?
  title           String
  description     String?
  value           Float?
  currency        String    @default("USD")
  status          String    @default("lead") // lead, qualified, proposal, negotiating, closed-won, closed-lost
  probability     Int       @default(10) // 0-100
  closeDate       DateTime?
  stageOrder      Int       @default(0) // For ordering within stages
  wonDate         DateTime? // When deal was won
  lostReason      String?   // Reason for lost deals
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  communications Communication[]
  activities     Activity[]
  notes          Note[]
  documents      Document[]
  tags           OpportunityTag[]
}

model OpportunityTag {
  id            String @id @default(cuid())
  opportunityId String
  tagId         String
  
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([opportunityId, tagId])
}

model Communication {
  id            String    @id @default(cuid())
  userId        String
  contactId     String?
  opportunityId String?
  type          String    // email, phone, meeting, task
  direction     String    // inbound, outbound
  subject       String?
  content       String?
  scheduledDate DateTime?
  completedDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}

model Activity {
  id            String    @id @default(cuid())
  userId        String
  contactId     String?
  opportunityId String?
  type          String    // call, email, meeting, task, note
  title         String
  description   String?
  dueDate       DateTime?
  completedAt   DateTime?
  priority      String    @default("medium") // low, medium, high, urgent
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}

model Note {
  id            String   @id @default(cuid())
  userId        String
  contactId     String?
  opportunityId String?
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}

model Document {
  id            String   @id @default(cuid())
  userId        String
  contactId     String?
  opportunityId String?
  filename      String
  originalName  String
  mimeType      String
  size          Int
  uploadPath    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
}
